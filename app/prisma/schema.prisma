// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////
// Users & Auth
//////////////////////////////////////

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String

  // âœ… RÃ©actions (remplace l'ancien User.likes)
  reactions Reaction[] @relation("UserReactions")

  // ðŸ‘‡ Deux relations DISTINCTES vers Friendship
  friendshipsInitiated Friendship[] @relation("user_friends_user")   // l'utilisateur envoie la demande
  friendshipsReceived  Friendship[] @relation("user_friends_friend") // l'utilisateur reÃ§oit la demande

  Account              Account[]
  Session              Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////////////////
// Domain
//////////////////////////////////////

model Work {
  id        String    @id @default(cuid())
  title     String
  category  String?
  venue     String?
  startDate DateTime?
  endDate   DateTime?
  priceMin  Float?
  priceMax  Float?
  imageUrl  String?
  sourceUrl String    @unique

  // âœ… RÃ©actions (remplace l'ancien Work.likes)
  reactions Reaction[] @relation("WorkReactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// âœ… Enum de statut : un seul Ã©tat par (user, work)
enum ReactionStatus {
  LIKE
  DISLIKE
  SEEN
}

// âœ… ModÃ¨le unifiÃ© pour like / dislike / vu
model Reaction {
  id        String          @id @default(cuid())
  userId    String
  workId    String
  status    ReactionStatus
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user User @relation(name: "UserReactions", fields: [userId], references: [id])
  work Work @relation(name: "WorkReactions", fields: [workId], references: [id])

  // UnicitÃ© : 1 seule rÃ©action (Ã©tat) par (user, work)
  @@unique([userId, workId], name: "userId_workId")

  // Index utiles
  @@index([userId, status])
  @@index([workId, status])
  @@index([createdAt])
}

model Friendship {
  id String @id @default(cuid())

  // Deux relations vers User avec des NOMS DE RELATION diffÃ©rents
  user   User   @relation("user_friends_user", fields: [userId], references: [id])
  userId String

  friend   User   @relation("user_friends_friend", fields: [friendId], references: [id])
  friendId String

  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model ImportJob {
  id        String   @id @default(cuid())
  source    String
  imported  Int
  createdAt DateTime @default(now())
}